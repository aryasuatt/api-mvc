Asp.Net Core 8 ile JWT (JSON Web Token) tabanlı bir kimlik doğrulama sistemi kurmak için aşağıdaki adımları takip edebilirsiniz. Bu adımlar, temel bir JWT kimlik doğrulama sistemi oluşturmanızı sağlayacaktır:

### 1. Proje Oluşturma

Öncelikle, bir ASP.NET Core 8 Web API projesi oluşturun. Eğer zaten bir projeniz varsa, bu adımı geçebilirsiniz.

```bash
dotnet new webapi -n JwtAuthExample
cd JwtAuthExample
```

### 2. Gerekli Paketleri Yükleme

JWT kimlik doğrulama için gerekli NuGet paketlerini yüklemeniz gerekiyor. `Microsoft.AspNetCore.Authentication.JwtBearer` paketini yükleyin:

```bash
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
```

### 3. `appsettings.json` Dosyasını Düzenleyin

JWT ayarlarınızı `appsettings.json` dosyasına ekleyin. Örneğin:

```json
{
  "Jwt": {
    "Key": "BuBirSifreOlmali", 
    "Issuer": "YourIssuer",
    "Audience": "YourAudience",
    "ExpireMinutes": 60
  },
  // Diğer ayarlar
}
```

Burada:
- `Key`: JWT token'ınızın imzalanmasında kullanılacak gizli anahtar.
- `Issuer`: Token'ı oluşturan kim.
- `Audience`: Token'ı kimin kullanacağı.
- `ExpireMinutes`: Token'ın geçerlilik süresi.

### 4. `Program.cs` Dosyasını Güncelleyin

JWT kimlik doğrulamasını yapılandırmak için `Program.cs` dosyasını güncelleyin. Örnek bir yapılandırma:

```csharp
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// JWT ayarlarını okuma
var jwtSettings = builder.Configuration.GetSection("Jwt");
var key = Encoding.ASCII.GetBytes(jwtSettings["Key"]);

// JWT kimlik doğrulama yapılandırması
builder.Services.AddAuthentication(x =>
{
    x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(x =>
{
    x.RequireHttpsMetadata = false;
    x.SaveToken = true;
    x.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(key),
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidIssuer = jwtSettings["Issuer"],
        ValidAudience = jwtSettings["Audience"]
    };
});

builder.Services.AddAuthorization();

var app = builder.Build();

// Middleware'leri ekleyin
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
```

### 5. Token Üretme (Authentication Controller)

Token üretmek için bir controller ekleyin. Örnek bir `AuthController`:

```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly IConfiguration _configuration;

    public AuthController(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    [HttpPost("login")]
    public IActionResult Login([FromBody] LoginModel loginModel)
    {
        // Bu örnek için kullanıcı doğrulama sabit
        if (loginModel.Username == "test" && loginModel.Password == "password")
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Key"]);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, loginModel.Username)
                }),
                Expires = DateTime.UtcNow.AddMinutes(Convert.ToDouble(_configuration["Jwt:ExpireMinutes"])),
                Issuer = _configuration["Jwt:Issuer"],
                Audience = _configuration["Jwt:Audience"],
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            var tokenString = tokenHandler.WriteToken(token);
            return Ok(new { Token = tokenString });
        }
        return Unauthorized();
    }
}

public class LoginModel
{
    public string Username { get; set; }
    public string Password { get; set; }
}
```

### 6. Korumalı API

JWT token'ı gerektiren bir endpoint oluşturun:

```csharp
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[ApiController]
[Route("api/[controller]")]
public class ValuesController : ControllerBase
{
    [HttpGet]
    [Authorize]
    public IActionResult Get()
    {
        return Ok(new { Value = "This is a protected value" });
    }
}
```

Bu temel kurulum ile JWT tabanlı kimlik doğrulama sistemini ASP.NET Core 8 projenize entegre etmiş olacaksınız. Gerçek bir projede, kullanıcı doğrulama ve token oluşturma işlemlerinin daha güvenli bir şekilde yapılması gerekecektir.






JWT token'ını kullanarak JavaScript ile API'ye nasıl istek atabileceğinizi göstereyim. Burada, `fetch` API'sini kullanarak hem token almayı hem de korumalı bir API'ye istek yapmayı göstereceğim.

### 1. Token'ı Almak

Öncelikle, bir POST isteği yaparak JWT token'ını almanız gerekiyor. Aşağıdaki kod, bir login isteği gönderir ve yanıt olarak token alır.

### 2. Token ile Korumalı API'ye İstek Göndermek

Token alındıktan sonra, bu token'ı kullanarak korumalı bir API'ye istek yapabilirsiniz.

#### Örnek JavaScript Kodu

```javascript
// Token'ı almak için fonksiyon
async function getToken() {
    const loginModel = {
        Username: "test",
        Password: "password"
    };

    const response = await fetch('https://localhost:5001/api/auth/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(loginModel)
    });

    if (!response.ok) {
        throw new Error('Login failed');
    }

    const data = await response.json();
    return data.token;
}

// Korumalı API'ye istek göndermek için fonksiyon
async function fetchProtectedData(token) {
    const response = await fetch('https://localhost:5001/api/values', {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });

    if (!response.ok) {
        throw new Error('Failed to fetch protected data');
    }

    const data = await response.json();
    console.log('Protected Data:', data);
}

// Ana fonksiyon
async function main() {
    try {
        const token = await getToken();
        await fetchProtectedData(token);
    } catch (error) {
        console.error(error);
    }
}

// Fonksiyonu çalıştır
main();
```

### Açıklamalar

1. **Token'ı Almak (`getToken` fonksiyonu)**:
   - `loginModel` nesnesini JSON formatında `POST` isteği olarak `AuthController`'ın `login` endpoint'ine gönderiyoruz.
   - Yanıt olarak JWT token'ını alıyoruz ve bu token'ı döndürüyoruz.

2. **Korumalı API'ye İstek Göndermek (`fetchProtectedData` fonksiyonu)**:
   - Alınan token'ı `Authorization` header'ında `Bearer` şeması ile API'ye gönderiyoruz.
   - `api/values` endpoint'ine `GET` isteği yaparak korumalı verilere erişiyoruz.
   - Yanıt olarak dönen veriyi konsola yazdırıyoruz.

3. **Ana Fonksiyon (`main` fonksiyonu)**:
   - `getToken` fonksiyonunu çağırarak token'ı alıyoruz.
   - Ardından, `fetchProtectedData` fonksiyonunu çağırarak korumalı API'ye istek gönderiyoruz.
   - Hataları yakalamak için `try-catch` bloğu kullanıyoruz.

### Notlar

- **CORS (Cross-Origin Resource Sharing)**: Eğer API ve frontend farklı alan adlarında çalışıyorsa, CORS ayarlarını yapmanız gerekebilir.
- **Güvenlik**: Web tarayıcısında token'ları saklarken dikkatli olmalısınız. Bu örnekte basitlik için doğrudan kullanılmıştır.

Bu örnekle, JavaScript kullanarak JWT token'ı ile API isteklerini nasıl yapabileceğinizi göstermiş olduk. Eğer başka sorularınız varsa ya da daha fazla detay isterseniz, sormaktan çekinmeyin!